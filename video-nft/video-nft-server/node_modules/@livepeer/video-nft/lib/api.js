"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prodApiEndpoint = void 0;
const fs = __importStar(require("fs"));
const axios_1 = __importDefault(require("axios"));
exports.prodApiEndpoint = 'https://livepeer.com';
class VodApi {
    constructor(apiKey, apiEndpoint = exports.prodApiEndpoint) {
        this.client = axios_1.default.create({
            baseURL: apiEndpoint,
            headers: {
                Authorization: `Bearer ${apiKey}`
            },
            maxContentLength: Infinity,
            maxBodyLength: Infinity
        });
        this.client.interceptors.response.use(res => {
            if (res.status >= 300) {
                throw new Error(`Error on ${res.config.method} ${res.config.url} (${res.status} ${res.statusText}): ${JSON.stringify(res.data)}`);
            }
            return res;
        });
    }
    async getAsset(id) {
        return this.makeRequest('get', `/api/asset/${id}`);
    }
    async getTask(id) {
        return this.makeRequest('get', `/api/task/${id}`);
    }
    async requestUploadUrl(assetName) {
        return this.makeRequest('post', `/api/asset/request-upload`, {
            name: assetName
        });
    }
    async uploadFile(url, filename) {
        let file = null;
        try {
            file = fs.createReadStream(filename);
            await this.makeRequest('put', url, file);
        }
        finally {
            file === null || file === void 0 ? void 0 : file.close();
        }
    }
    async transcodeAsset(src, profile, name) {
        return this.makeRequest('post', `/api/asset/transcode`, {
            assetId: src.id,
            name: name !== null && name !== void 0 ? name : `${src.name} (${profile.name})`,
            profile
        });
    }
    async exportAsset(id, nftMetadata) {
        return this.makeRequest('post', `/api/asset/${id}/export`, {
            ipfs: { nftMetadata }
        });
    }
    // next level utilities
    async waitTask(task) {
        var _a, _b, _c, _d;
        console.log(`Waiting for ${task.type} task completion... id=${task.id}`);
        let lastProgress = 0;
        while (((_a = task.status) === null || _a === void 0 ? void 0 : _a.phase) !== 'completed' &&
            ((_b = task.status) === null || _b === void 0 ? void 0 : _b.phase) !== 'failed') {
            const progress = (_c = task.status) === null || _c === void 0 ? void 0 : _c.progress;
            if (progress && progress !== lastProgress) {
                console.log(` - progress: ${100 * progress}%`);
                lastProgress = progress;
            }
            new Promise(resolve => setTimeout(resolve, 1000));
            task = await this.getTask((_d = task.id) !== null && _d !== void 0 ? _d : '');
        }
        if (task.status.phase === 'failed') {
            throw new Error(`${task.type} task failed. error: ${task.status.errorMessage}`);
        }
        return task;
    }
    async makeRequest(method, path, data) {
        try {
            const res = await this.client.request({ method, url: path, data });
            res.request;
            return res.data;
        }
        catch (err) {
            if (!axios_1.default.isAxiosError(err) || !err.response) {
                throw err;
            }
            const { status, statusText, data } = err.response;
            let msg = JSON.stringify(data);
            if (Array.isArray(data.errors) && data.errors.length > 0) {
                msg = data.errors[0];
            }
            throw new Error(`Request to ${path} failed (${status} ${statusText}): ${msg}`);
        }
    }
}
exports.default = VodApi;
