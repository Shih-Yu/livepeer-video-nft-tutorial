"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = __importDefault(require("./api"));
const cli_1 = __importDefault(require("./cli"));
const transcode_1 = require("./transcode");
async function videoNft() {
    var _a, _b, _c;
    const args = await (0, cli_1.default)();
    const api = new api_1.default(args.apiKey, args.apiEndpoint);
    console.log('1. Requesting upload URL... ');
    const { url: uploadUrl, asset: { id: assetId }, task: importTask } = await api.requestUploadUrl(args.assetName);
    console.log(`Pending asset with id=${assetId}`);
    console.log('2. Uploading file...');
    await api.uploadFile(uploadUrl, args.filename);
    await api.waitTask(importTask);
    let asset = await api.getAsset(assetId !== null && assetId !== void 0 ? assetId : '');
    const desiredProfile = await (0, transcode_1.getDesiredProfile)(asset);
    if (desiredProfile) {
        console.log(`3. Transcoding asset to ${desiredProfile.name} at ${Math.round(desiredProfile.bitrate / 1024)} kbps bitrate`);
        const transcode = await api.transcodeAsset(asset, desiredProfile);
        await api.waitTask(transcode.task);
        asset = transcode.asset;
    }
    console.log('3. Starting export... ');
    let { task: exportTask } = await api.exportAsset((_a = asset.id) !== null && _a !== void 0 ? _a : '', JSON.parse(args.nftMetadata));
    console.log(`Created export task with id=${exportTask.id}`);
    exportTask = await api.waitTask(exportTask);
    const result = (_c = (_b = exportTask.output) === null || _b === void 0 ? void 0 : _b.export) === null || _c === void 0 ? void 0 : _c.ipfs;
    console.log(`4. Export successful! Result: \n${JSON.stringify(result, null, 2)}`);
    console.log(`5. Mint your NFT at:\n` +
        `https://livepeer.com/mint-nft?tokenUri=${result === null || result === void 0 ? void 0 : result.nftMetadataUrl}`);
}
videoNft().catch(err => {
    console.error(err);
    process.exit(1);
});
