"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const inquirer_1 = __importDefault(require("inquirer"));
const yargs_1 = __importDefault(require("yargs"));
const helpers_1 = require("yargs/helpers");
const api_1 = require("./api");
function parseRawArgs(argv) {
    var _a;
    return yargs_1.default
        .command('$0 [filename]', '1-command mint a video NFT')
        .positional('filename', {
        describe: 'file to upload as an NFT',
        type: 'string'
    })
        .options({
        'api-key': {
            describe: 'API key to use for Livepeer API',
            type: 'string'
        },
        'asset-name': {
            describe: 'name for the asset created in Livepeer.com API',
            type: 'string'
        },
        'nft-metadata': {
            describe: 'additional JSON metadata to override default generated by Livepeer for the NFT',
            type: 'string',
            default: '{}'
        },
        'api-endpoint': {
            describe: 'the endpoint to use for the Livepeer API',
            type: 'string',
            default: api_1.prodApiEndpoint
        }
    })
        .usage(`
	Video NFT

  Mint a video NFT in 1 command with Livepeer.

	Usage: video-nft [filename] [options]`)
        .env('LP_')
        .help()
        .parse((_a = argv) !== null && _a !== void 0 ? _a : (0, helpers_1.hideBin)(process.argv));
}
const uuidRegex = /^[0-9a-f]{8}\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\b[0-9a-f]{12}$/;
async function promptMissing(args) {
    let { apiKey, filename, assetName, nftMetadata } = args;
    if (!apiKey) {
        apiKey = await inquirer_1.default
            .prompt({
            type: 'password',
            name: 'apiKey',
            message: 'Enter your Livepeer API key (learn more at http://bit.ly/lp-api-key):',
            mask: '*',
            validate: apiKey => uuidRegex.test(apiKey) || 'Not a valid API key'
        })
            .then(ans => ans.apiKey);
        console.log('Tip: You can set the LP_API_KEY environment variable to avoid this prompt.');
    }
    if (!filename) {
        filename = await inquirer_1.default
            .prompt({
            type: 'input',
            name: 'filename',
            message: 'What file do you want to use?',
            validate: (value) => fs.existsSync(value) || 'File does not exist'
        })
            .then(ans => ans.filename);
        console.log('You can also send the filename as an argument to this command.');
    }
    if (!assetName) {
        assetName = await inquirer_1.default
            .prompt({
            type: 'input',
            name: 'assetName',
            message: `What name do you want to give to your NFT?`,
            default: path.basename(filename)
        })
            .then(ans => ans.assetName);
    }
    if (nftMetadata === '{}') {
        const { shouldEdit } = await inquirer_1.default.prompt({
            type: 'confirm',
            name: 'shouldEdit',
            message: `Would you like to customize the NFT metadata?`,
            default: false
        });
        if (shouldEdit) {
            console.log(' - The `animation_url` and `properties.video` fields will be populated with the exported video URL.');
            console.log(' - Set any field to `null` to delete it.');
            nftMetadata = await inquirer_1.default
                .prompt({
                type: 'editor',
                name: 'nftMetadata',
                message: 'Open text editor:',
                default: JSON.stringify({
                    name: assetName,
                    description: `Livepeer video from asset ${JSON.stringify(assetName)}`,
                    image: `ipfs://bafkreidmlgpjoxgvefhid2xjyqjnpmjjmq47yyrcm6ifvoovclty7sm4wm`,
                    properties: {}
                }, null, 2),
                validate: (value) => {
                    try {
                        JSON.parse(value);
                        return true;
                    }
                    catch (e) {
                        return `Invalid JSON: ${e}`;
                    }
                }
            })
                .then(ans => ans.nftMetadata);
        }
    }
    return {
        ...args,
        apiKey,
        filename,
        assetName,
        nftMetadata
    };
}
async function parseCli(argv) {
    const args = await parseRawArgs(argv);
    if (args.filename && !fs.existsSync(args.filename)) {
        throw new Error(`File ${args.filename} does not exist`);
    }
    if (fs.existsSync(args.nftMetadata)) {
        args.nftMetadata = fs.readFileSync(args.nftMetadata, 'utf8');
    }
    try {
        if (args.nftMetadata != '{}') {
            const metadata = JSON.parse(args.nftMetadata);
            console.log(`Using metadata:\n${JSON.stringify(metadata, null, 2)}`);
        }
    }
    catch (e) {
        throw new Error(`Invalid JSON in nft-metadata: ${e}`);
    }
    return promptMissing(args);
}
exports.default = parseCli;
